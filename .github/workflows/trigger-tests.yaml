name: Trigger Post-Deploy Tests

on:
  workflow_call:
    inputs:
      new-tag:
        type: string
        required: true
      current-tag:
        type: string
        required: true
      environment:
        type: string
        required: true
    outputs:
      current-tag:
        value: ${{ inputs.current-tag }}
      new-tag:
        value: ${{ inputs.new-tag }}        
    secrets:
      CICD_SLACK_WEBHOOK:
        required: true

jobs:
  trigger-tests:
    name: Trigger Post-Deploy Tests
    runs-on: ubuntu-latest
    steps:
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: ${{ vars.KUBECTL_VERSION || 'latest' }}

      - name: Wait for deployment
        run: |
          EXPECTED_REPLICAS=${{ vars.K8S_REPLICAS || 3 }}
          DEPLOY_PULL_INTERVAL=${{ vars.DEPLOY_PULL_INTERVAL || 20 }}
          DEPLOY_PULL_COUNT=${{ vars.DEPLOY_PULL_COUNT || 10 }}
          DEPLOY_FORCE_RUN_TESTS=${{ vars.DEPLOY_FORCE_RUN_TESTS || 'false' }}
          K8S_NAMESPACE=${{ vars.K8S_NAMESPACE || 'default' }}
          APP_NAME=${GITHUB_REPOSITORY##*/}
          echo "Waiting for $APP_NAME deployment to be available in environment: ${{ inputs.environment }} with $EXPECTED_REPLICAS replicas and tag ${{ inputs.new-tag }}"
          while true; do
            AVAILABLE_REPLICAS=$(kubectl get pods -n ${K8S_NAMESPACE} --show-labels --no-headers -l app=${APP_NAME} -l tag=${{ inputs.new-tag }} | wc -l)
            ORPHANED_REPLICAS=$(kubectl get pods -n ${K8S_NAMESPACE} --show-labels --no-headers -l app=${APP_NAME} | grep -v "${{ inputs.new-tag }}" | wc -l)
            if [[ "$AVAILABLE_REPLICAS" -ge "$EXPECTED_REPLICAS" && "$ORPHANED_REPLICAS" == "0" ]]; then
              echo "Deployment is available with $AVAILABLE_REPLICAS replicas."
              break
            else
              echo "Waiting for deployment to be available... Current replicas: $AVAILABLE_REPLICAS"
              sleep $DEPLOY_PULL_INTERVAL
              ((DEPLOY_PULL_COUNT--))
              if [[ $DEPLOY_PULL_COUNT -le 0 ]]; then
                if [[ "${{ vars.DEPLOY_FORCE_RUN_TESTS }}" == "true" ]]; then
                  echo "Forcing tests to run despite deployment not being available."
                  break
                fi
                echo "Deployment did not become available in time. Exiting."
                exit 1
              fi
            fi
          done

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          set -o pipefail
          echo "Running tests for ${GITHUB_REPOSITORY##*/} in environment: ${{ inputs.environment }}"
          if [[ ${{ inputs.environment }} == "dev" ]]; then
            BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
            ENV_NAME=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | tr '/' '-' | tr '/.' '-')
          else
            ENV_NAME=${{ inputs.environment }}
          fi
          mkdir coverage

          case ${{ inputs.environment }} in
            dev)
              npm run test:integration -- --coverage | tee coverage/output.txt
              echo "TITLE=Regression/Integration" >> $GITHUB_ENV
              ;;
            staging)
              npm run test:endtoend -- --coverage | tee coverage/output.txt
              echo "TITLE=End-to-End" >> $GITHUB_ENV
              ;;  
            prod)
              npm run test:smoke -- --coverage | tee coverage/output.txt
              echo "TITLE=Smoke" >> $GITHUB_ENV
              ;;
            *)
              npm run test:integration -- --coverage | tee coverage/output.txt
              echo "TITLE=Regression/Integration" >> $GITHUB_ENV
              ;;
          SERVICE_URL=http://${GITHUB_REPOSITORY##*/}.${GITHUB_REPOSITORY##*/}-${ENV_NAME}.svc.cluster.local:${{ vars.SERVICE_PORT || '3000' }}
          export SERVICE_URL
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV          
          esac    
          echo "Tests executed successfully."

      - name: Print summary
        run: |
          echo "### Service ${SERVICE_URL} ${TITLE} test report:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY          
          cat coverage/output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Notyfy about test results
        if: ${{ fromJSON(vars.NOTIFY_DEPLY_SUCCESS || 'true') }}
        run: |
          MESSAGE="${GITHUB_REPOSITORY##*/} has been successfully deployed to *${{ inputs.environment }}* environment.\n\
          Workflow Run: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\n\
          Service URL: $SERVICE_URL\n\
          Tag: ${{ inputs.new-tag }}"         
          
          curl -ks -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}"  ${{ secrets.CICD_SLACK_WEBHOOK }}
          echo "Sent ot slack: $MESSAGE"