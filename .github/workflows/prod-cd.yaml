name: Promote to Prod

on:
  workflow_call:

jobs:
  action-based-promote:
    if: github.ref_name == 'main' && github.ref_type == 'branch'
    name: Action-Based Promotion Workflow
    runs-on: ubuntu-latest
    outputs:
      new-tag: ${{ steps.ci-preflight.outputs.promoted-version }}
      image-repo: ${{ steps.ci-preflight.outputs.image-repo }}
      start-time: ${{ steps.ci-preflight.outputs.start-time }}
      gitops-repo: ${{ steps.ci-preflight.outputs.gitops-repo }}
      gitops-file: ${{ steps.ci-preflight.outputs.gitops-file }}
      app-name: ${{ steps.ci-preflight.outputs.app-name }}
      target-namespace: ${{ steps.ci-preflight.outputs.target-namespace }}
      subdomain: ${{ steps.ci-preflight.outputs.subdomain }}
      public-service-fqdn: ${{ steps.ci-preflight.outputs.public-service-fqdn }}
      local-service-fqdn: ${{ steps.ci-preflight.outputs.local-service-fqdn }}
      service-url: ${{ steps.ci-preflight.outputs.service-url }}
      effective-branch: ${{ steps.ci-preflight.outputs.effective-branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Pre-Flight Checks
        id: ci-preflight
        uses: mdefenders-actions/ci-preflight@dev
        with:
          domain: ${{ vars.DOMAIN }}
          environment: 'prod'

      - name: Check if Docker image exists on DockerHub
        id: check-image
        uses: tyriis/docker-image-tag-exists@v2.1.0
        with:
          registry: docker.io
          repository: ${{ steps.ci-preflight.outputs.image-repo }}
          tag: ${{ steps.ci-preflight.outputs.promoted-version }}

      - name: Exit if image not found
        if: steps.check-image.outputs.tag == 'not found'
        run: |
          echo "Docker image ${{ steps.ci-preflight.outputs.image-repo }}:${{ steps.ci-preflight.outputs.promoted-version }} not found . Exiting."
          exit 1

      - name: Call CD
        id: call-cd
        uses: mdefenders-actions/call-action@dev
        with:
          github-token: ${{ secrets.MDEFENDERS_GITHUB_TOKEN }}
          workflows-to-call: |
            {
              "${{ steps.ci-preflight.outputs.gitops-repo }}": {
                "yaml": "${{ vars.GITOPS_CD_WORKFLOW || 'cd-update-gitops.yaml' }}",
                "ref": "${{ vars.GITOPS_CD_DEFAULT_BRANCH || 'main' }}",
                "data": {
                  "gitops-branch": "${{ steps.ci-preflight.outputs.effective-branch }}",
                  "new-tag": "${{ steps.ci-preflight.outputs.promoted-version }}",
                  "gitops-file": "${{ steps.ci-preflight.outputs.gitops-file }}",
                  "image": "${{ steps.ci-preflight.outputs.image-repo }}",
                  "app": "${{ steps.ci-preflight.outputs.app-name }}",
                  "replicas": "${{ vars.PROD_TEST_REPLICAS || '3' }}",
                  "rollback": "false",
                  "dry-run": "false"
                }
              }
            }
      - name: Notify and Report on Failure
        if: failure()
        uses: mdefenders-actions/cd-notify-and-report@dev
        with:
          image-name: ${{ steps.ci-preflight.outputs.image-repo }}
          image-tag: ${{ steps.ci-preflight.outputs.promoted-version }}
          prom-push-token: ${{ secrets.PROM_PUSH_TOKEN }}
          workflow-name: ${{ github.workflow }}
          cicd-slack-webhook: ${{ secrets.CICD_SLACK_WEBHOOK }}
          service-url: ${{ steps.ci-preflight.outputs.service-url }}
          loki-push-url: ${{ vars.LOKI_PUSH_URL }}
          start-time: ${{ steps.ci-preflight.outputs.start-time }}
          workflow-success: '0'
          app-name: ${{ steps.ci-preflight.outputs.app-name }}
          environment: 'prod'

  post-deploy:
    if: github.ref_name == 'main' && github.ref_type == 'branch'
    name: Post-Deploy Workflow
    runs-on: ubuntu-latest
    needs: action-based-promote
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Verify deployment
        uses: mdefenders-actions/cd-verify-deployment@dev
        with:
          expected-pods: ${{ vars.PROD_REPLICAS || '3' }}
          pull-interval: ${{ vars.DEPLOY_PULL_INTERVAL || '20' }}
          pull-count: ${{ vars.DEPLOY_PULL_COUNT || '10' }}
          force-run-tests: ${{ vars.DEPLOY_FORCE_RUN_TESTS || 'false' }}
          app-name: ${{ needs.action-based-promote.outputs.app-name }}
          revision-tag: ${{ needs.action-based-promote.outputs.new-tag }}
          k8s-namespace: ${{ needs.action-based-promote.outputs.target-namespace }}

      - name: Post-Deploy Tests
        uses: mdefenders-actions/ci-code-quality@dev
        with:
          runLint: false
          runUnitTests: false
          runIntegrationTests: true
          reportTitle: 'Smoke Tests'
          namespace: ${{ needs.action-based-promote.outputs.target-namespace }}
          intTestCommand: ${{ vars.SMOKE_TEST_COMMAND || 'make test-smoke' }}
          url: ${{ needs.action-based-promote.outputs.service-url }}


      - name: Notify and Report
        if: always()
        uses: mdefenders-actions/cd-notify-and-report@dev
        with:
          image-name: ${{ needs.action-based-promote.outputs.image-repo }}
          image-tag: ${{ needs.action-based-promote.outputs.new-tag }}
          prom-push-token: ${{ secrets.PROM_PUSH_TOKEN }}
          workflow-name: ${{ github.workflow }}
          cicd-slack-webhook: ${{ secrets.CICD_SLACK_WEBHOOK }}
          service-url: ${{ needs.action-based-promote.outputs.service-url }}
          loki-push-url: ${{ vars.LOKI_PUSH_URL }}
          start-time: ${{ needs.action-based-promote.outputs.start-time }}
          workflow-success: ${{ job.status == 'success' && '1' || '0' }}
          app-name: ${{ needs.action-based-promote.outputs.app-name }}
          environment: ${{ inputs.deploy-to-environment }}          