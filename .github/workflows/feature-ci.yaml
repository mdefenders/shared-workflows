name: Feature Branch CI

on:
  workflow_call:

jobs:
  call-metrics-init:
    if: startsWith(github.head_ref || github.ref_name, 'feature/') && github.ref_type == 'branch'
    name: Init Metrics Workflow
    uses: mdefenders/shared-workflows/.github/workflows/metrics-init.yaml@dev

  action-based-ci:
    if: startsWith(github.head_ref || github.ref_name, 'feature/') && github.ref_type == 'branch'
    needs: call-metrics-init
    name: Action-Based CI Workflow
    runs-on: ubuntu-latest
    outputs:
      new-tag: ${{ steps.get-image-tags.outputs.new-tag }}
    steps:
      - name: Get start time
        run: echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "${{ vars.NODE_VER || '20' }}"
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Run Unit Tests
        uses: mdefenders-actions/ci-code-quality@dev
        with:
          minCoverage: ${{ vars.MIN_COVERAGE }}

      - name: Get Image Tags
        id: get-image-tags
        uses: mdefenders-actions/ci-prepare-docker-build@dev

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ steps.get-image-tags.outputs.new-image }}

      - name: Build and push (optional) Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.get-image-tags.outputs.all-images }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Install Trivy Template
        run: |
          mkdir -p contrib
          wget -q -O contrib/html.tpl  ${{ vars.TRIVY_TEMPLATE || 'https://raw.githubusercontent.com/mdefenders/misc/refs/heads/main/aquasecurity/trivy/contrib/html.tpl'}}          

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ steps.get-image-tags.outputs.new-image }}:${{ steps.get-image-tags.outputs.new-tag }}'
          format: 'template'
          template: "@contrib/html.tpl"
          exit-code: ${{ vars.FAIL_BUILDS_ON_SCAN == 'true' && '1' || '0' }}
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-report.html'

      - name: Print Trivy summary
        if: always()
        run: |
          echo '### Trivy scan report:' >> $GITHUB_STEP_SUMMARY
          echo '<details><summary>Click to expand Image Scan Result</summary>' >> $GITHUB_STEP_SUMMARY          
          cat trivy-report.html >> $GITHUB_STEP_SUMMARY
          echo '</details>' >> $GITHUB_STEP_SUMMARY

      - name: Call CD
        id: call-cd
        uses: mdefenders-actions/call-action@dev
        with:
          github-token: ${{ secrets.MDEFENDERS_GITHUB_TOKEN }}
          workflows-to-call: |
            {
              "${{ vars.GITOPS_REPO != '' && vars.GITOPS_REPO || format('{0}-gitops', github.repository) }}": {
                "yaml": "${{ vars.GITOPS_CD_WORKFLOW || 'cd-update-gitops.yaml' }}",
                "ref": "${{ vars.GITOPS_CD_DEFAULT_BRANCH || 'main' }}",
                "data": {
                  "gitops-branch": "${{ github.head_ref || github.ref_name }}",
                  "new-tag": "${{ steps.get-image-tags.outputs.new-tag }}",
                  "gitops-file": "${{ vars.GITOPS_FILE_PATH || 'deploy/environments' }}/dev/${{ vars.GITOPS_FILE_NAME || 'values.yaml' }}",
                  "environment": "dev",
                  "image": "${{ steps.get-image-tags.outputs.new-image }}",
                  "app": "${{ vars.APP_NAME || github.event.repository.name }}",
                  "replicas": "${{ vars.DEV_TEST_REPLICAS || '3' }}",
                  "rollback": "false",
                  "dry-run": "false"
                }
              }
            }


  post-deploy:
    if: startsWith(github.head_ref || github.ref_name, 'feature/') && github.ref_type == 'branch'
    name: Post-Deploy Workflow
    runs-on: ubuntu-latest
    needs: action-based-ci
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "${{ vars.NODE_VER || '20' }}"
          cache: npm

      - name: Compute namespace
        id: ns
        run: |
          repo="${{ vars.GITOPS_REPO }}"
          if [ -z "$repo" ]; then
            repo="${GITHUB_REPOSITORY}-gitops"
          fi
          # remove `-gitops` suffix
          repo="${repo%-gitops}"

          branch="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          # replace / and _ with -
          branch="${branch//\//-}"
          branch="${branch//_/-}"

          echo "namespace=${repo}-${branch}" >> $GITHUB_OUTPUT

      - name: Verify deployment
        uses: mdefenders-actions/cd-verify-deployment@dev
        with:
          expected-pods: ${{ vars.DEV_TEST_REPLICAS || '3' }}
          pull-interval: ${{ vars.DEPLOY_PULL_INTERVAL || '20' }}
          pull-count: ${{ vars.DEPLOY_PULL_COUNT || '10' }}
          force-run-tests: ${{ vars.DEPLOY_FORCE_RUN_TESTS || 'false' }}
          app-name: ${{ vars.APP_NAME || github.event.repository.name }}
          revision-tag: ${{ needs.action-based-ci.outputs.new-tag }}
          k8s-namespace:  ${{ steps.ns.outputs.namespace }}

      - name: Post-Deploy Tests
        uses: mdefenders-actions/ci-code-quality@dev
        with:
          runLint: false
          runUnitTests: false
          runIntegrationTests: true
          reportTitle: 'Regression Tests'

      - name: Call CD Reduce
        id: call-cd-reduce
        uses: mdefenders-actions/call-action@dev
        with:
          github-token: ${{ secrets.MDEFENDERS_GITHUB_TOKEN }}
          workflows-to-call: |
            {
              "${{ vars.GITOPS_REPO != '' && vars.GITOPS_REPO || format('{0}-gitops', github.repository) }}": {
                "yaml": "${{ vars.GITOPS_CD_WORKFLOW || 'cd-update-gitops.yaml' }}",
                "ref": "${{ vars.GITOPS_CD_DEFAULT_BRANCH || 'main' }}",
                "data": {
                  "gitops-branch": "${{ github.head_ref || github.ref_name }}",
                  "new-tag": "${{ steps.get-image-tags.outputs.new-tag }}",
                  "gitops-file": "${{ vars.GITOPS_FILE_PATH || 'deploy/environments' }}/dev/${{ vars.GITOPS_FILE_NAME || 'values.yaml' }}",
                  "environment": "dev",
                  "image": "${{ steps.get-image-tags.outputs.new-image }}",
                  "app": "${{ vars.APP_NAME || github.event.repository.name }}",
                  "replicas": "${{ vars.DEV_REPLICAS || '0' }}",
                  "rollback": "false",
                  "dry-run": "false"
                }
              }
            }          

  call-cd-deploy:
    needs: action-based-ci
    if: startsWith(github.head_ref || github.ref_name, 'feature/') && github.ref_type == 'branch'
    name: Deploy Image Workflow
    uses: mdefenders/shared-workflows/.github/workflows/cd-deploy.yaml@dev
    with:
      new-tag: ${{ needs.action-based-ci.outputs.new-tag }}
      gitops-file: ${{ vars.GITOPS_FILE_PATH || 'deploy/environments' }}/dev/${{ vars.GITOPS_FILE_NAME || 'values.yaml' }}
      environment: 'dev'
      replicas: ${{ fromJSON(vars.DEV_TEST_REPLICAS || '3') }}

  call-trigger-tests:
    needs: call-cd-deploy
    if: startsWith(github.head_ref || github.ref_name, 'feature/') && github.ref_type == 'branch'
    name: Trigger Post-Deploy Tests Workflow
    uses: mdefenders/shared-workflows/.github/workflows/trigger-tests.yaml@dev
    with:
      new-tag: ${{ needs.call-cd-deploy.outputs.new-tag }}
      current-tag: ${{ needs.call-cd-deploy.outputs.current-tag }}
      environment: 'dev'
    secrets: inherit

  call-cd-undeploy:
    needs: [ call-cd-deploy, call-trigger-tests ]
    if: always() && startsWith(github.head_ref || github.ref_name, 'feature/') && github.ref_type == 'branch'
    name: Deploy Image Workflow
    uses: mdefenders/shared-workflows/.github/workflows/cd-deploy.yaml@dev
    with:
      new-tag: ${{ needs.call-trigger-tests.outputs.new-tag }}
      gitops-file: ${{ vars.GITOPS_FILE_PATH || 'deploy/environments' }}/dev/${{ vars.GITOPS_FILE_NAME || 'values.yaml' }}
      environment: 'dev'
      replicas: ${{ fromJSON(vars.DEV_REPLICAS || '0') }}

  call-metrics-push-success:
    needs: [ action-based-ci, call-cd-deploy, call-cd-undeploy, call-trigger-tests, action-based-ci, call-metrics-init ]
    if: startsWith(github.head_ref || github.ref_name, 'feature/') && github.ref_type == 'branch'
    name: Push Metrics Workflow
    uses: mdefenders/shared-workflows/.github/workflows/metrics-push.yaml@dev
    with:
      start-time: ${{ needs.call-metrics-init.outputs.start-time }}
      workflow-name: 'Feature Branch CI'
      workflow-success: 1
    secrets: inherit

  call-metrics-push-failure:
    needs: [ action-based-ci, call-cd-deploy, call-cd-undeploy, call-trigger-tests, action-based-ci, call-metrics-init ]
    if: failure() && startsWith(github.head_ref || github.ref_name, 'feature/') && github.ref_type == 'branch'
    name: Push Metrics Workflow
    uses: mdefenders/shared-workflows/.github/workflows/metrics-push.yaml@dev
    with:
      start-time: ${{ needs.call-metrics-init.outputs.start-time }}
      workflow-name: 'Feature Branch CI'
    secrets: inherit