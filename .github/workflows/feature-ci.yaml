name: Feature Branch CI

on:
  workflow_call:

jobs:

  action-based-ci:
    if: startsWith(github.head_ref || github.ref_name, 'feature/') && github.ref_type == 'branch'
    name: Action-Based CI Workflow
    runs-on: ubuntu-latest
    outputs:
      new-tag: ${{ steps.get-image-tags.outputs.new-tag }}
      new-image: ${{ steps.get-image-tags.outputs.new-image }}
      start-time: ${{ steps.get-start-time.outputs.start-time }}
    steps:
      - name: Get start time
        id: get-start-time
        run: echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "${{ vars.NODE_VER || '20' }}"
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Run Unit Tests
        uses: mdefenders-actions/ci-code-quality@dev
        with:
          minCoverage: ${{ vars.MIN_COVERAGE }}

      - name: Get Image Tags
        id: get-image-tags
        uses: mdefenders-actions/ci-prepare-docker-build@dev

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ steps.get-image-tags.outputs.new-image }}

      - name: Build and push (optional) Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.get-image-tags.outputs.all-images }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Install Trivy Template
        run: |
          mkdir -p contrib
          wget -q -O contrib/html.tpl  ${{ vars.TRIVY_TEMPLATE || 'https://raw.githubusercontent.com/mdefenders/misc/refs/heads/main/aquasecurity/trivy/contrib/html.tpl'}}          

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ steps.get-image-tags.outputs.new-image }}:${{ steps.get-image-tags.outputs.new-tag }}'
          format: 'template'
          template: "@contrib/html.tpl"
          exit-code: ${{ vars.FAIL_BUILDS_ON_SCAN == 'true' && '1' || '0' }}
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-report.html'

      - name: Print Trivy summary
        if: always()
        run: |
          echo '### Trivy scan report:' >> $GITHUB_STEP_SUMMARY
          echo '<details><summary>Click to expand Image Scan Result</summary>' >> $GITHUB_STEP_SUMMARY          
          cat trivy-report.html >> $GITHUB_STEP_SUMMARY
          echo '</details>' >> $GITHUB_STEP_SUMMARY

      - name: Call CD
        id: call-cd
        uses: mdefenders-actions/call-action@dev
        with:
          github-token: ${{ secrets.MDEFENDERS_GITHUB_TOKEN }}
          workflows-to-call: |
            {
              "${{ vars.GITOPS_REPO != '' && vars.GITOPS_REPO || format('{0}-gitops', github.repository) }}": {
                "yaml": "${{ vars.GITOPS_CD_WORKFLOW || 'cd-update-gitops.yaml' }}",
                "ref": "${{ vars.GITOPS_CD_DEFAULT_BRANCH || 'main' }}",
                "data": {
                  "gitops-branch": "${{ github.head_ref || github.ref_name }}",
                  "new-tag": "${{ steps.get-image-tags.outputs.new-tag }}",
                  "gitops-file": "${{ vars.GITOPS_FILE_PATH || 'deploy/environments' }}/dev/${{ vars.GITOPS_FILE_NAME || 'values.yaml' }}",
                  "environment": "dev",
                  "image": "${{ steps.get-image-tags.outputs.new-image }}",
                  "app": "${{ vars.APP_NAME || github.event.repository.name }}",
                  "replicas": "${{ vars.DEV_TEST_REPLICAS || '3' }}",
                  "rollback": "false",
                  "dry-run": "false"
                }
              }
            }

  post-deploy:
    if: startsWith(github.head_ref || github.ref_name, 'feature/') && github.ref_type == 'branch'
    name: Post-Deploy Workflow
    runs-on: ubuntu-latest
    needs: action-based-ci
    outputs:
      start-time: ${{ needs.action-based-ci.outputs.start-time }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "${{ vars.NODE_VER || '20' }}"
          cache: npm

      - name: Compute namespace
        id: ns
        uses: actions/github-script@v7
        with:
          script: |
            const repo = process.env.GITOPS_REPO || ""
            let repoName = repo !== "" ? repo.split("/").pop() : context.repo.repo
            let base = repoName.replace(/-gitops$/, "")
            // branch or ref
            let branch = context.ref.replace("refs/heads/", "")
            if (context.payload.pull_request) {
              branch = context.payload.pull_request.head.ref
            }
            // sanitize: replace / and _ with -
            branch = branch.replace(/[\/_]/g, "-")
            const ns = `${base}-${branch}`
            core.setOutput("namespace", ns)
            core.setOutput("subdomain", branch)
            core.info(`Namespace: ${ns}, Subdomain: ${branch}`)

      - name: Verify deployment
        uses: mdefenders-actions/cd-verify-deployment@dev
        with:
          expected-pods: ${{ vars.DEV_TEST_REPLICAS || '3' }}
          pull-interval: ${{ vars.DEPLOY_PULL_INTERVAL || '20' }}
          pull-count: ${{ vars.DEPLOY_PULL_COUNT || '10' }}
          force-run-tests: ${{ vars.DEPLOY_FORCE_RUN_TESTS || 'false' }}
          app-name: ${{ vars.APP_NAME || github.event.repository.name }}
          revision-tag: ${{ needs.action-based-ci.outputs.new-tag }}
          k8s-namespace: ${{ steps.ns.outputs.namespace }}

      - name: Post-Deploy Tests
        uses: mdefenders-actions/ci-code-quality@dev
        with:
          runLint: false
          runUnitTests: false
          runIntegrationTests: true
          reportTitle: 'Regression Tests'
          appName: ${{ vars.APP_NAME || github.event.repository.name }}
          serviceDomain: ${{ vars.DOMAIN || 'svc.cluster.local' }}
          namespace: ${{ steps.ns.outputs.namespace }}
          subdomain: ${{ steps.ns.outputs.subdomain }}

      - name: Call CD Reduce
        id: call-cd-reduce
        uses: mdefenders-actions/call-action@dev
        with:
          github-token: ${{ secrets.MDEFENDERS_GITHUB_TOKEN }}
          workflows-to-call: |
            {
              "${{ vars.GITOPS_REPO != '' && vars.GITOPS_REPO || format('{0}-gitops', github.repository) }}": {
                "yaml": "${{ vars.GITOPS_CD_WORKFLOW || 'cd-update-gitops.yaml' }}",
                "ref": "${{ vars.GITOPS_CD_DEFAULT_BRANCH || 'main' }}",
                "data": {
                  "gitops-branch": "${{ github.head_ref || github.ref_name }}",
                  "new-tag": "${{ needs.action-based-ci.outputs.new-tag }}",
                  "gitops-file": "${{ vars.GITOPS_FILE_PATH || 'deploy/environments' }}/dev/${{ vars.GITOPS_FILE_NAME || 'values.yaml' }}",
                  "environment": "dev",
                  "image": "${{ needs.action-based-ci.outputs.new-image }}",
                  "app": "${{ vars.APP_NAME || github.event.repository.name }}",
                  "replicas": "${{ vars.DEV_REPLICAS || '0' }}",
                  "rollback": "false",
                  "dry-run": "false"
                }
              }
            }
      - name: Notify and Report
        if: always()
        uses: mdefenders-actions/cd-notify-and-report@dev
        with:
          image-name: ${{ needs.action-based-ci.outputs.new-image }}
          image-tag: ${{ needs.action-based-ci.outputs.new-tag }}
          prom-push-token: ${{ secrets.PROM_PUSH_TOKEN }}
          workflow-name: 'Feature Branch CI'
          cicd-slack-webhook: ${{ secrets.CICD_SLACK_WEBHOOK }}
          service-url: 'url'
          loki-push-url: ${{ vars.LOKI_PUSH_URL }}
          start-time: ${{ needs.action-based-ci.outputs.start-time }}
          workflow-success: ${{ success() && '1' || '0' }}
          app-name: ${{ vars.APP_NAME || github.event.repository.name }}
